@import "fonts";
@import "colors";

$x-large-screen: 1200px;
$mid-large-screen: 1024px;
$large-screen: 992px;
$medium-screen: 768px;
$small-screen: 576px;
$x-small-screen: 360px;
$u-small-screen: 320px;

//popular mixins

//breakpoints-handling example:  .element { @include mq('medium-screen') { all_styles_in_selected_screen_will_go_here} }
$breakpoints: (
    "u-small-screen": 320px,
    "x-small-screen": 360px,
    "small-screen": 576px,
    "medium-screen": 769px,
    "large-screen": 992px,
    "mid-large-screen": 1025px,
    "x-large-screen": 1200px,
    "wide-screen": 1440px,
    "full-hd" : 1920px
);

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin cover-structure() {
    width: 100%;
    height: 100vh;
}

//z-index auto-handling usage: z-index: z('site-header');
@function z($name) {
    @if index($z-indexes, $name) {
        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
        @return null;
    }
}

$z-indexes: (
    "outdated-browser",
    "modal",
    "site-header",
    "page-wrapper",
    "site-footer"
);

//font-handling
@mixin font-set($type: false, $size: false, $colour: false, $weight: false,  $lh: false) {
    @if ($type == 1) {
        font-family: 'ProximaNovaRegular';
    }

    @if ($type == 2) {
        font-family: 'ProximaNovaBold';
    }


    @if $size {
        font-size: $size;
    }
    @if $colour {
        color: $colour;
    }
    @if $weight {
        font-weight: $weight;
    }
    @if $lh {
        line-height: $lh;
    }
}

//auto for centering
@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}

//pseudod handling
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}

//mantain ratio for images etc example: div {  @include responsive-ratio(16,9); }

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote(( $y / $x ) * 100 + '%');
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

//triangle creating
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

//for hardware acceleration
@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}

//for truncating elements
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

//mixing for common img background

@mixin img-bg-cover($url, $backgroundColor) {
    background-color: $backgroundColor;
    background-image: url($url);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}


//auto sets fixed screen size on height and removes it on mobile

@mixin fixed-height-size($size) {
    height: $size;
    @include mq('small-screen', 'max') {
        height: auto;
    }
}

//adds 100% to containers and rows for fixed sizes

@mixin heightPercent() {
    .container {
        height: 100%;
        @include mq('small-screen', 'max') {
            height: auto;
        }

        .row {
            height: 100%;
            @include mq('small-screen', 'max') {
                height: auto;
            }
        }
    }
}

//animation for imagens mixin

@mixin img-animation() {
    transition: ease 0.5s all;
    &:hover {
        transform: scale(1.06);
        box-shadow: 0px 10px 10px -8px rgba(0, 0, 0, 0.75);
        transition: ease 0.5s all;
    }
}

@mixin remove-br-mobile() {
    @include mq('small-screen', 'max') {
        br {
            display: none;
        }
    }
}

/*------------------Utils---------------------*/
.invert-order {
    @media screen and (max-width: $medium-screen) {
        display: flex;
        flex-wrap: wrap-reverse;
    }

    @media screen and (max-width: $small-screen) {
        display: flex;
        flex-wrap: wrap-reverse;
    }

    @media screen and (max-width: $x-small-screen) {
        display: flex;
        flex-wrap: wrap-reverse;
    }
}

.removeFixedheight,
.removeFixedheight.fp-slide,
.removeFixedheight.fp-tableCell {
    @media screen and (max-width: $medium-screen) {
        height: auto !important;
    }

    @media screen and (max-width: $small-screen) {
        height: auto !important;
    }
}

.row.no-gutters {
    margin-right: 0;
    margin-left: 0;

    & > [class^="col-"],
    & > [class*=" col-"] {
        padding-right: 0;
        padding-left: 0;
    }
}

.center-text {
    text-align: center !important;
}

.no-side-padding {
    padding-right: 0;
    padding-left: 0;
}

///utils

.line {
    width: 100%;
    height: 4px;
    background-color: white;
    position: relative;
    margin-top: 3em;
    margin-bottom: 3em;

    .circle {
        position: absolute;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background-color: #fff;
        left: 0;
        right: 0;
        top: -15px;
        margin-left: auto;
        margin-right: auto;
    }

    $triangleSize: 20px;
    $triangleTop: -18px;
    $triangleOffset: -3px;

    .right-arrow {
        @include css-triangle(white, 'right', $triangleSize);
        right: 0;
        margin-right: $triangleOffset;
        margin-top: $triangleTop;
    }

    .left-arrow {
        @include css-triangle(white, 'left', $triangleSize);
        left: 0;
        margin-left: $triangleOffset;
        margin-top: $triangleTop;
    }

    @include mq('medium-screen', 'max') {
        display: none;
    }
}

.left {
    text-align: left;
}

.center {
    text-align: center;
}

.right {
    text-align: right;
}

.pop-btn {
    border-radius: 10px;
    max-width: 10em;
    padding: 0.2em 1em 0.2em 1em;
    transition: ease 0.5s all;
    margin-top: 1em;
    text-align: center;
    @include font-set(3, 1.3em, $white, 500);

    &:hover {
        color: $white;
        text-decoration: none;
        box-shadow: 2px 8px 20px -13px rgba(0, 0, 0, 0.75);
        transform: scale(1.05);
        transition: ease 0.5s all;
    }
}

.scroll-down {
    position: absolute;
    //left: 50%;
    bottom: 30px;
    display: block;
    text-align: center;
    font-size: 20px;
    z-index: 100;
    text-decoration: none;
    text-shadow: 0;
    width: 25px;
    height: 25px;
    border-bottom: 2px solid #fff;
    border-right: 2px solid #fff;
    z-index: 2;
    //left: 50%;
    transform: translate(-50%, 0%) rotate(45deg);
    animation: fade_move_down 1s ease-in-out infinite;
}


/*animated scroll arrow animation*/
@-webkit-keyframes fade_move_down {
    0% {
        -webkit-transform: translate(0, -10px) rotate(45deg);
        opacity: 0;
    }
    50% {
        opacity: 1;
    }
    100% {
        -webkit-transform: translate(0, 10px) rotate(45deg);
        opacity: 0;
    }
}

@-moz-keyframes fade_move_down {
    0% {
        -moz-transform: translate(0, -10px) rotate(45deg);
        opacity: 0;
    }
    50% {
        opacity: 1;
    }
    100% {
        -moz-transform: translate(0, 10px) rotate(45deg);
        opacity: 0;
    }
}

@keyframes fade_move_down {
    0% {
        transform: translate(0, -10px) rotate(45deg);
        opacity: 0;
    }
    50% {
        opacity: 1;
    }
    100% {
        transform: translate(0, 10px) rotate(45deg);
        opacity: 0;
    }
}

.center-on-mobile {
    @include mq('small-screen', 'max') {
        text-align: center;
    }
}

.auto-align-on-mobile {
    margin: auto;
}

.margin-top {
    margin-top: 5em;
}

.perfect-align-center {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.perfect-align-center-top {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
}

.perfect-align-center-spaced {
    display: flex;
    flex-direction: column;
    justify-content: space-around;;
    align-items: center;
}

.perfect-align-left {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
}

.perfect-align-left-spaced {
    display: flex;
    flex-direction: column;
    justify-content: space-around;;
    align-items: flex-start;
}

.perfect-align-right {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
}


textarea:focus,
textarea.form-control:focus,
input.form-control:focus,
input[type=text]:focus,
input[type=password]:focus,
input[type=email]:focus,
input[type=number]:focus,
[type=text].form-control:focus,
[type=password].form-control:focus,
[type=email].form-control:focus,
[type=tel].form-control:focus,
[contenteditable].form-control:focus {
    box-shadow: inset 0 -1px 0 #ddd;
}

.force-left {
    left: 50%;
}
